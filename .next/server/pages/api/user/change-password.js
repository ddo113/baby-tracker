"use strict";(()=>{var e={};e.id=913,e.ids=[913],e.modules={8432:e=>{e.exports=require("bcryptjs")},1649:e=>{e.exports=require("next-auth/react")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},9022:(e,s,a)=>{a.r(s),a.d(s,{config:()=>c,default:()=>p,routeModule:()=>w});var r={};a.r(r),a.d(r,{default:()=>handler});var t=a(1802),n=a(7153),i=a(6249),o=a(1649),u=a(8432),d=a.n(u),l=a(2995);async function handler(e,s){if("PUT"!==e.method)return s.status(405).json({message:"Method not allowed"});try{let a=await (0,o.getSession)({req:e});if(!a)return s.status(401).json({message:"Not authenticated"});let{currentPassword:r,newPassword:t}=e.body,n=await l.Z.user.findUnique({where:{id:a.user.id}});if(!n)return s.status(404).json({message:"User not found"});let i=await d().compare(r,n.password);if(!i)return s.status(400).json({message:"Current password is incorrect"});let u=await d().hash(t,12);await l.Z.user.update({where:{id:a.user.id},data:{password:u}}),s.status(200).json({message:"Password updated successfully"})}catch(e){console.error("Password change error:",e),s.status(500).json({message:"Something went wrong"})}}let p=(0,i.l)(r,"default"),c=(0,i.l)(r,"config"),w=new t.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/user/change-password",pathname:"/api/user/change-password",bundlePath:"",filename:""},userland:r})},2995:(e,s,a)=>{a.d(s,{Z:()=>n});let r=require("@prisma/client"),t=global.prisma||new r.PrismaClient,n=t}};var s=require("../../../webpack-api-runtime.js");s.C(e);var __webpack_exec__=e=>s(s.s=e),a=s.X(0,[222],()=>__webpack_exec__(9022));module.exports=a})();